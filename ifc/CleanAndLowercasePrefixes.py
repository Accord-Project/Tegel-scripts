from rdflib import Graph
import re
import argparse

def remove_unused_and_lowercase_prefixes(input_file, output_file):
    # Step 0: Extract @base directive from the original file, if present
    with open(input_file, "r", encoding="utf-8") as f:
        original_ttl = f.read()

    base_match = re.search(r'@base\s+<([^>]*)>\s*\.\s*', original_ttl, re.IGNORECASE)
    base_directive = f"@base <{base_match.group(1)}> .\n" if base_match else ""

    # Load RDF graph
    g = Graph()
    g.parse(input_file, format="turtle")

    # Serialize graph (removes unused prefixes)
    cleaned_ttl = g.serialize(format="turtle")

    # Step 1: Find all prefix declarations and build a map of replacements
    prefix_pattern = re.compile(r'@prefix\s+([a-zA-Z_][\w\-]*):\s*<([^>]*)>\s*\.\s*')
    prefix_map = {}
    keep_as_is = set()
    for match in prefix_pattern.finditer(cleaned_ttl):
        original_prefix = match.group(1)
        # Keep prefixes that contain any capital letter and are not all upper or lower
        if not (original_prefix.islower() or original_prefix.isupper()) and any(c.isupper() for c in original_prefix):
            keep_as_is.add(original_prefix)
        elif original_prefix != original_prefix.lower():
            prefix_map[original_prefix] = original_prefix.lower()

    # Step 2a: Replace @prefix declarations with lowercase versions, except for protected ones
    def replace_prefix_decl(match):
        prefix = match.group(1)
        uri = match.group(2)
        if prefix in keep_as_is:
            return f"@prefix {prefix}: <{uri}> .\n"
        return f"@prefix {prefix.lower()}: <{uri}> .\n"

    lowercased_ttl = prefix_pattern.sub(replace_prefix_decl, cleaned_ttl)

    # Step 2b: Re-insert @base directive at the top if it existed
    if base_directive:
        lowercased_ttl = base_directive + lowercased_ttl

    # Step 3: Replace all occurrences of the prefixes in the triples
    for original, lower in prefix_map.items():
        usage_pattern = re.compile(rf'(?<![\w]){re.escape(original)}:')
        lowercased_ttl = usage_pattern.sub(f'{lower}:', lowercased_ttl)

    # Save the modified TTL
    with open(output_file, "w", encoding="utf-8") as f:
        f.write(lowercased_ttl)

    print(f"Cleaned and lowercased RDF written to: {output_file}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Simple app removing unused prefixes from a Turtle file'
                                                         'generated by xSPARQL conversion '
                                                         'and lowercase the remaining prefixes.')
    parser.add_argument("input", help="Input TTL file")
    parser.add_argument("output", help="Output TTL file")

    args = parser.parse_args()
    remove_unused_and_lowercase_prefixes(args.input, args.output)    